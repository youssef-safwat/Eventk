@model ServiceContracts.DTOs.Dashboard.EventDashboardEditRequest
@{
    ViewData["Title"] = "Create Event";
    Layout = "_DashboardLayout";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Create Event</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a asp-controller="Dashboard" asp-action="Index">Dashboard</a></li>
        <li class="breadcrumb-item"><a asp-controller="EventsDashboard" asp-action="Index">Events</a></li>
        <li class="breadcrumb-item active">Create</li>
    </ol>

    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-calendar-plus me-1"></i>
            Create New Event
        </div>
        <div class="card-body">
            <form asp-action="Create" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label asp-for="EventName" class="control-label">Event Name</label>
                            <input asp-for="EventName" class="form-control" />
                            <span asp-validation-for="EventName" class="text-danger"></span>
                        </div>
                          
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="StartDate" class="control-label">Start Date</label>
                                    <input asp-for="StartDate" class="form-control" type="datetime-local" />
                                    <span asp-validation-for="StartDate" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="EndDate" class="control-label">End Date</label>
                                    <input asp-for="EndDate" class="form-control" type="datetime-local" />
                                    <span asp-validation-for="EndDate" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label asp-for="Description" class="control-label">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="5"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="CategoryIds" class="control-label">Categories</label>
                            <select asp-for="CategoryIds" class="form-control select2" multiple
                                    asp-items="@(new SelectList(ViewBag.Categories, "CategoryId", "CategoryName"))">
                            </select>
                            <span asp-validation-for="CategoryIds" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="EventPictureFile" class="control-label">Event Image</label>
                            <input asp-for="EventPictureFile" class="form-control" type="file" accept="image/*" />
                            <span asp-validation-for="EventPictureFile" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                
                <!-- Google Maps Location Picker -->
                <div class="row mb-3">
                    <div class="col-12">
                        <div class="form-group mb-3">
                            <label asp-for="Location" class="control-label">Location</label>
                            <div class="input-group">
                                <input asp-for="Location" id="location-input" class="form-control" placeholder="Search for a location or click on the map" />
                                <button type="button" id="current-location-btn" class="btn btn-outline-secondary">
                                    <i class="fas fa-map-marker-alt"></i> Current Location
                                </button>
                            </div>
                            <span asp-validation-for="Location" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-12">
                        <div id="map" style="height: 400px; width: 100%;" class="border rounded"></div>
                        <input type="hidden" asp-for="Latitude" id="latitude-input" />
                        <input type="hidden" asp-for="Longitude" id="longitude-input" />
                    </div>
                </div>
                
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Create</button>
                    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <!-- Google Maps JavaScript API -->
    <script src="https://maps.googleapis.com/maps/api/js?key=<YOUR-API>>&libraries=places"></script>

    <script>
        // Initialize the map and related functionality
        let map;
        let marker;
        let autocomplete;

        // Default coordinates (Egypt)
        const defaultLat = 30.0444;
        const defaultLng = 31.2357;

        function initMap() {
            // Create the map
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: defaultLat, lng: defaultLng },
                zoom: 13,
                mapTypeControl: true,
                streetViewControl: true
            });

            // Create a draggable marker
            marker = new google.maps.Marker({
                position: { lat: defaultLat, lng: defaultLng },
                map: map,
                draggable: true,
                animation: google.maps.Animation.DROP
            });

            // When the marker is dragged
            google.maps.event.addListener(marker, 'dragend', function() {
                updateLocationFields(marker.getPosition());
                reverseGeocode(marker.getPosition());
            });

            // When the map is clicked
            google.maps.event.addListener(map, 'click', function(event) {
                marker.setPosition(event.latLng);
                updateLocationFields(event.latLng);
                reverseGeocode(event.latLng);
            });

            // Autocomplete for the text input
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('location-input'),
                { types: ['geocode'] }
            );
            autocomplete.addListener('place_changed', function() {
                const place = autocomplete.getPlace();
                if (!place.geometry) return;

                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                marker.setPosition(place.geometry.location);
                updateLocationFields(place.geometry.location);
                document.getElementById('location-input').value = place.formatted_address;
            });

            // Current Location button
            document.getElementById('current-location-btn').addEventListener('click', function() {
                if (!navigator.geolocation) {
                    alert("Error: Your browser doesn't support geolocation.");
                    return;
                }
                navigator.geolocation.getCurrentPosition(
                    onLocationSuccess,
                    function(err) {
                        alert('Error: The Geolocation service failed (' + err.message + ').');
                    },
                    { timeout: 10000 }
                );
            });

            // If editing and lat/lng inputs are pre-filled
            const latInput = document.getElementById('latitude-input');
            const lngInput = document.getElementById('longitude-input');
            if (latInput.value && lngInput.value) {
                const pos = {
                    lat: parseFloat(latInput.value),
                    lng: parseFloat(lngInput.value)
                };
                map.setCenter(pos);
                map.setZoom(17);
                marker.setPosition(pos);
            }
        }

        // Success callback for geolocation
        function onLocationSuccess(position) {
            const pos = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };

            map.setCenter(pos);
            map.setZoom(17);
            marker.setPosition(pos);

            // Update hidden inputs
            document.getElementById('latitude-input').value = pos.lat;
            document.getElementById('longitude-input').value = pos.lng;

            // Fill the address textbox
            reverseGeocode(pos);
        }

        // Update the hidden form fields
        function updateLocationFields(position) {
            document.getElementById('latitude-input').value = position.lat();
            document.getElementById('longitude-input').value = position.lng();
        }

        // Reverse geocode to get the address
        function reverseGeocode(position) {
            const geocoder = new google.maps.Geocoder();
            geocoder.geocode({ location: position }, function(results, status) {
                if (status === 'OK' && results[0]) {
                    document.getElementById('location-input').value = results[0].formatted_address;
                }
            });
        }

        // Initialize map on page load
        document.addEventListener('DOMContentLoaded', initMap);
    </script>
}

